package me.white.itemeditor.node;

import com.mojang.brigadier.exceptions.CommandSyntaxException;
import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
import me.white.itemeditor.ItemEditor;
import me.white.itemeditor.node.entity.*;
import com.mojang.brigadier.tree.LiteralCommandNode;
import net.fabricmc.fabric.api.client.command.v2.ClientCommandManager;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.minecraft.command.CommandRegistryAccess;
import net.minecraft.item.ArmorStandItem;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.SpawnEggItem;
import net.minecraft.text.Text;

public class EntityNode implements Node {
    public static final CommandSyntaxException CANNOT_EDIT_EXCEPTION = new SimpleCommandExceptionType(Text.translatable("commands.edit.entity.error.cannotedit")).create();
    private static final Node[] NODES = new Node[] {
            new TypeNode(),
            new PositionNode(),
    };

    public static boolean canEdit(ItemStack stack) {
        Item item = stack.getItem();
        return item instanceof SpawnEggItem ||
                item instanceof ArmorStandItem;
    }

    public void register(LiteralCommandNode<FabricClientCommandSource> rootNode, CommandRegistryAccess registryAccess) {
        LiteralCommandNode<FabricClientCommandSource> node = ClientCommandManager
                .literal("entity")
                .build();

        for (Node entityNode : NODES) {
            try {
                entityNode.register(node, registryAccess);
            } catch (IllegalStateException e) {
                ItemEditor.LOGGER.error("Failed to register " + entityNode.getClass().getName() + ": " + e);
            }
        }
        // TODO:
        // ... motion ...
        // ... rotation ...
        // ... fire ...
        // ... visual_fire ... (may be implemented in ... fire ...)
        // ... air ...
        // ... gravity ...
        // ... silence ...
        // ... invulnerability ...
        // ... glow ...
        // ... name ...
        // ... tag ...
        // ... loot ...
        // ... hand ...
        // ... team ... (?)
        // ... leashed ...
        // ... effect ...
        // ... persistance ...
        // ... AI ...
        // ... picking_up ... (CanPickUpLoot... how do i name it??)
        // ... equipment ...
        // ... absorption ...
        // ... health ...
        // ... sleep ...
        // ... attribute ...
        // ... passenger ...
        // and other entity-specific tags, like bat flags, entity variants, display entities and so on (ye thats hell)

        rootNode.addChild(node);
    }
}
